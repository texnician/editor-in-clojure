import "class.stg"

component_header(filename, date, manifest, name, body) ::= <<
// <manifest>
// @date: <date>

#ifndef <name>
#define <name>

#include \<string\>
#include \<vector\>
#include \<list\>
#include \<map\>
#include \<sstream\>
#include "icomponent.h"
#include "json/json-forwards.h"

#if defined(_MSC_VER)
#pragma warning (push)
#pragma warning (disable: 4819)
#endif

<body>

#if defined(_MSC_VER)
#pragma warning (pop)
#endif

#endif // <name>

/// <filename> ends here

>>

component_sid_initialize(comps, paddings, sids) ::= <<
<comps, paddings, sids:{c, p, s|const unsigned int <c>::sid_ <p> = <s>;}; separator="\n">
>>

component_raw_name_initialize(comps, paddings, raw_names) ::= <<
<comps, paddings, raw_names:{c, p, r|const char* const <c>::raw_name_ <p> = "<r>";}; separator="\n">
>>

component_cpp(filename, date, manifest, sid_initialize, raw_name_initialize, component_headers, component_defines) ::= <<
// <manifest>
// @date: <date>

#include "define.h"
#include "hw_logger.h"
#include "json/json.h"
#include "json/json_util.h"
<component_headers:{x|#include "<x>"}; separator="\n">

<sid_initialize>

<raw_name_initialize>

<component_defines:{x|<x>}; separator="\n\n">

// <filename> ends here

>>

json_function_define(to_json, from_json) ::= <<
<to_json>

<from_json>
>>

to_json(class_name, attribute_to_jsons) ::= <<
Json::Value <class_name>::ToJSONValue() const
{
    Json::Value root;

    <attribute_to_jsons:{x|<x>}; separator="\n">

    return root;
}
>>

from_json(class_name, attribute_from_jsons) ::= <<
bool <class_name>::FromJSONValue(const Json::Value& root)
{
    try
    {
        <attribute_from_jsons:{x|<x>}; separator="\n">
        
        return true;
    }
    catch (std::runtime_error& e) {
        LOG(L_ERROR, "FromJSONValue error: %s", e.what());
        return false;
    }
}
>>

atom_attribute_to_json(raw_name, attr_name) ::= <<
root["<raw_name>"] = this-\><attr_name>;
>>

array_attribute_to_json(raw_name, attr_name) ::= <<
{
    Json::Value& array = root["<raw_name>"];
    ArrayToJsonValue(this-\><attr_name>, &array);
}
>>

atom_attribute_from_json(raw_name, default_value, attr_name, converter) ::= <<
this-\><attr_name> = root.get("<raw_name>", <default_value>).<converter>();
>>

array_attribute_from_json(raw_name, vec_type, attr_name, converter) ::= <<
{
    const Json::Value& array = root["<raw_name>"];
    <vec_type> vec_val;
    vec_val.reserve(array.size());
    for (Json::ArrayIndex i = 0; i \< array.size(); ++i) {
#if defined(_CXX0X_)
        vec_val.emplace_back(array[i].<converter>());
#else
        vec_val.push_back(array[i].<converter>());
#endif
    }
#if defined(_CXX0X_)
    this-><attr_name> = std::move(vec_val);
#else
    this-><attr_name>.swap(vec_val);
#endif
}
>>

component_class(name, comp_name, bases, initialize_list, initialize_members, sid, attributes, getters_and_setters) ::= <<
class HW_BASE_API <name> <bases>
{
    <attributes>

public:
    static const unsigned int sid_;

    static const char* const raw_name_;
    
    <name>()
        <initialize_list>
        {
            <initialize_members>       
        }

    virtual ~<name>()
        {}

    unsigned int Sid() const
        {
            return <sid>;
        }
        
    const char* Name() const
        {
            return "<comp_name>";
        }

    const char* RawName() const
        {
            return raw_name_;
        }
        
    <getters_and_setters>

    Json::Value ToJSONValue() const;

    bool FromJSONValue(const Json::Value& root);
};
>>

bases(base_list) ::= "<if(base_list)>: <base_list:{x | public <x>}; separator=\", \"><endif>"

doc_lines(lines) ::= "<lines:{x|<doc_line(x)>}; separator=\"\n\">"

doc_line(line) ::= "// <line>"

attributes(types, names, docs) ::= "<types, names, docs:{t,n,d |<attr(t, n, d)>}; separator=\"\n\">"

attr(type, name, doc) ::= <<
<doc>
<type> <name>;
>>

initialize_list(attrs, values) ::= "<if(attrs)>: <attrs, values:{a, v |<initial_attr(a, v)>}; wrap, anchor, separator=\", \"><endif>"

initial_attr(attr, value) ::= "<attr>(<value>)"

initialize_members(blocks) ::= <<
<blocks:{x|<x>}; separator="\n\n">
>>

initialize_vector_block(push_backs, emplace_backs) ::= <<
{
#if defined(_CXX0X_)
    <emplace_backs:{x|<x>}; separator="\n">
#else
    <push_backs:{x|<x>}; separator="\n">
#endif    
}
>>

getters_and_setters(types, getters, setters, setter_arg_types, m_names, arg_names) ::= "<types, getters, setters, setter_arg_types, m_names, arg_names:{t,g,s,sa,m,a |<getter_and_setter(t, g, s, sa, m, a)>}; separator=\"\n\n\">"

getter_and_setter(type, getter, setter, setter_arg_type, m_name, arg_name) ::= <<
<type> <getter>() const
    {
        return this-\><m_name>;
    }

void <setter>(<setter_arg_type> <arg_name>)
    {
        this-\><m_name> = <arg_name>;
    }
>>




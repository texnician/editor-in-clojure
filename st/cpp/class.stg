component_class(name, bases, initialize_list, attributes, getters_and_setters) ::= <<
class <name> <bases>
{
    <attributes>

public:
    <name>()
        <initialize_list>
        {}

    virtual ~<name>()
        {}

    int Type() const
        {
            return 0;
        }
        
    const char* Name() const
        {
            return "<name>";
        }
        
    <getters_and_setters>
};
>>

bases(base_list) ::= "<if(base_list)>: <base_list:{x | public <x>}; separator=\", \"><endif>"

attributes(types, names, docs) ::= "<types, names, docs:{t,n,d |<attr(t, n, d)>}; separator=\"\n\">"

attr(type, name, doc) ::= <<
// <doc>
<type> <name>;
>>

initialize_list(attrs, values) ::= "<if(attrs)>: <attrs, values:{a, v |<initial_attr(a, v)>}; wrap, anchor, separator=\", \"><endif>"

initial_attr(attr, value) ::= "<attr>(<value>)"

getters_and_setters(types, getters, setters, m_names, arg_names) ::= "<types, getters, setters, m_names, arg_names:{t,g,s,m,a |<getter_and_setter(t, g, s, m, a)>}; separator=\"\n\n\">"

getter_and_setter(type, getter, setter, m_name, arg_name) ::= <<
<type> <getter>() const
    {
        return this-\><m_name>;
    }

void <setter>(<type> <arg_name>)
    {
        this-\><m_name> = <arg_name>;
    }
>>




component_factory_header(file_name, guard, manifest, date, factory_decls) ::= <<
// <manifest>
// @date: <date>

#ifndef <guard>
#define <guard>

<includes()>

<delcares()>

<factory_decls:{x|<x>}; separator="\n\n">

#endif // <guard>

/// <file_name> ends here

>>

includes() ::= <<
#include \<memory\>
#include "icomponent_factory.h"
>>

delcares() ::= <<
class TiXmlElement;
>>

smart_ptr(class) ::= "std::auto_ptr\<<class>>"

component_factory_cpp(file_name, date, component_factory_defines) ::= <<
// Automatically generated by happy world editor, DO NOT edit by hand.
// @date: <date>

#include "tinyxml.h"
#include "factory_exception.h"
#include "component_factory.h"

<component_factory_defines:{x|<x>}; separator="\n\n">

/// <file_name> ends here

>>

component_factory_decl(factory_name, interface_name) ::= <<
class <factory_name> : public IComponentFactory
{
protect:
    virtual <smart_ptr(interface_name)> DoCreateFromXML(const TiXmlElement* data);
};
>>

component_factory_define(class_name, factory_name, find_component_node, build_attributes) ::= <<
<smart_ptr("IComponent")> <factory_name>::DoCreateFromXML(const TiXmlElement* data)
{
    <smart_ptr(class_name)> p(new <class_name>);
    
    const TiXmlElement *component_node = NULL;
    
    <find_component_node>

    if (component_node != NULL) {
        <build_attributes>
    }
    else
        throw ComponentNodeNotFound("<class_name>", __FILE__, __LINE__);

    return p;                
}
>>

find_component_node(go_tag, raw_name, class_name) ::= <<
for (const TiXmlElement *node = data->FirstChildElement("<go_tag>");
     node; node = node->NextSiblingElement())
{
    const char* attribute_name = node->Attribute("name");
    if (attribute_name != NULL) {
        if (strcmp(attribute_name, "<raw_name>") == 0) {
            component_node = node;
            break;
        }
    }
    else
        throw ComponentNameNotFound("<class_name>", __FILE__, __LINE__);
}
>>

build_attributes(component_names, variable_names, attr_names, set_blocks) ::= "<component_names, variable_names, attr_names, set_blocks:{c, v, a, s|<build_attribute(c, v, a, s)>}; separator=\"\n\n\">"

build_attribute(component_name, variable_name, attr_name, set_block) ::= <<
const TiXmlElement *ele_<variable_name> = component_node->FirstChildElement("<attr_name>");
if (ele_<variable_name>) {
    const char *text = ele_<variable_name>->GetText();
    if (text) {
        <set_block>
    }
    else
        throw AttributeValueNotFound("<component_name>", "<attr_name>", __FILE__, __LINE__);
}
else
    throw AttributeNotFound("<component_name>", "<attr_name>", __FILE__, __LINE__);
>>

set_int_value(attr, setter) ::= <<
int <attr> = atoi(text);
p-><setter>(<attr>);
>>

set_string_value(attr, setter) ::= <<
p-><setter>(text);
>>

set_enum_value(attr, setter) ::= <<
p-><setter>(text);
>>

set_bool_value(attr, setter) ::= <<
if (strcmp("true", text) == 0) {
    p-><setter>(true);
} else if (strcmp("false", text) == 0) {
    p-><setter>(false);
}
else
    throw BoolValueError("<attr>", text, __FILE__, __LINE__);
>>

set_unknown_value(attr, setter) ::= <<
throw UnkownAttributeValueType("<attr>", __FILE__, __LINE__);
>>

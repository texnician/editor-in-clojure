test_factory_file(manifest, filename, date, comp_headers, comp_tests) ::= <<
// <manifest>
// @date: <date>

#include \<memory\>
#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "sid.h"
#include "tinyxml.h"
#include "json/json.h"
#include "component_factory.h"
#include "hw_db.h"
#include "mock_hw_db.h"
<comp_headers:{x|#include "<x>"}; separator="\n">

using ::testing::_;
using ::testing::Return;
using ::testing::StrEq;
using ::testing::AtMost;

class ComponentFactoryTest : public ::testing::Test {
protected:
    virtual void SetUp()
        {}

    virtual void TearDown()
        {}
};

<comp_tests; separator="\n">
// <filename> ends here.

>>

comp_tests(comp_names, factory_names, xml_strings, attr_test_groups, mock_cursor_block) ::= "<comp_names, factory_names, xml_strings, attr_test_groups, mock_cursor_block:{c, f, x, a, m|<comp_test(c, f, x, a, m)>}; separator=\"\n\n\">"

comp_test(comp_name, factory_name, raw_name, xml_string, attr_test_group, mock_cursor_block) ::= <<
TEST_F(ComponentFactoryTest, <comp_name>)
{
    std::auto_ptr\<TiXmlElement\> data(new TiXmlElement("<comp_name>"));

    data->Parse("<xml_string; anchor, separator="\\\n">", 0, TIXML_ENCODING_UTF8);

    <factory_name> factory;
    std::auto_ptr\<<comp_name>\> p((<comp_name>*)(factory.CreateFromXML(data.get()).release()));
    ASSERT_EQ(p-\>Sid(), sid("<comp_name>").get_id());
    ASSERT_STREQ(p-\>Name(), "<comp_name>");

    <attr_test_group>

    Json::Value root;
    root["<raw_name>"] = p-\>ToJSONValue();

    std::auto_ptr\<<comp_name>\> p1(p.release());
    
    p.reset((<comp_name>*)(factory.CreateFromJSON(root).release()));

    <attr_test_group>

    ASSERT_EQ(p->ToJSONValue().compare(p1->ToJSONValue()), 0);

    HWDBRecordSet rs;

    <mock_cursor_block>
    
    Json::Value jvrs;
    jvrs["<raw_name>"] = factory.CreateJSONFromRecordSet(rs, HWSQLCmd());
    p.reset((<comp_name>*)(factory.CreateFromJSON(jvrs).release()));

    <attr_test_group>

    ASSERT_EQ(jvrs["<raw_name>"].compare(root["<raw_name>"]), 0);
}

>>

attr_test_group(statements) ::= "<statements; separator=\"\n\">"

array_attr_test_block(array_type, getter, statements) ::= <<
{
    <array_type> vec_val = p-\><getter>();
    <statements:{x|<x>}; separator="\n">
}
>>

mock_cursors(define_sub_cursors, set_sub_cursors, expect_mock_cursors, final_sub_cursors) ::= <<
SHARED_PTR\<MockIHWDBCursor\> root_cursor_ptr(new MockIHWDBCursor);
<define_sub_cursors:{x|<x>}; separator="\n">

rs.SetCursor(root_cursor_ptr);
<set_sub_cursors:{x|<x>}; separator="\n">

<expect_mock_cursors:{x|<x>}; separator="\n">
>>

define_sub_cursor(var_name) ::= <<
SHARED_PTR\<MockIHWDBCursor\> <var_name>_cursor_ptr(new MockIHWDBCursor);
>>

set_sub_cursor(attr_name, var_name) ::= <<
rs.GetSubRecordSet("<attr_name>").SetCursor(<var_name>_cursor_ptr);
>>

expect_mock_cursor(cursor_name, has_record, field_name, value) ::= <<
<expect_call_get_record(cursor_name, has_record)>
<expect_call_get_attribute(cursor_name, field_name, value)>
>>

expect_root_mock_cursor(cursor_name, field_name, value) ::= <<
<expect_call_get_attribute(cursor_name, field_name, value)>
>>

expect_sub_mock_cursor(cursor_name, field_name, count, has_records, values) ::= <<
<expect_sub_mock_cursor_count(cursor_name, count)>
EXPECT_CALL(*<cursor_name>_cursor_ptr, GetRecord())
    <has_records:{x|<will_once_return(x)>}; separator="\n">
    <will_once_return("false")>;
EXPECT_CALL(*<cursor_name>_cursor_ptr, GetFieldValueByName(StrEq("<field_name>")))
    .Times(AtMost(<count>))
    <values:{v|<will_once_return(v)>}; separator="\n">;
>>

expect_sub_mock_cursor_count(cursor_name, count) ::= <<
EXPECT_CALL(*<cursor_name>_cursor_ptr, GetRecordCount())
    <will_once_return(count)>;
>>

expect_call_get_record(cursor_name, value) ::= <<
EXPECT_CALL(*<cursor_name>_cursor_ptr, GetRecord())
    <will_once_return(value)>;
>>

expect_call_get_attribute(cursor_name, field_name, value) ::= <<
EXPECT_CALL(*<cursor_name>_cursor_ptr, GetFieldValueByName(StrEq("<field_name>")))
    <will_once_return(value)>;
>>

will_once_return(v) ::= <<
.WillOnce(Return(<v>))
>>


test_factory_file(manifest, filename, date, comp_headers, comp_tests) ::= <<
// <manifest>
// @date: <date>

#include \<memory\>
#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "sid.h"
#include "tinyxml.h"
#include "json/json.h"
#include "component_factory.h"
<comp_headers:{x|#include "<x>"}; separator="\n">

class ComponentFactoryTest : public ::testing::Test {
protected:
    virtual void SetUp()
        {}

    virtual void TearDown()
        {}
};

<comp_tests; separator="\n">
// <filename> ends here.

>>

comp_tests(comp_names, factory_names, xml_strings, attr_test_groups) ::= "<comp_names, factory_names, xml_strings, attr_test_groups:{c, f, x, a|<comp_test(c, f, x, a)>}; separator=\"\n\n\">"

comp_test(comp_name, factory_name, xml_string, attr_test_group) ::= <<
TEST_F(ComponentFactoryTest, <comp_name>)
{
    std::auto_ptr\<TiXmlElement\> data(new TiXmlElement("<comp_name>"));

    data->Parse("<xml_string; anchor, separator="\\\n">", 0, TIXML_ENCODING_UTF8);

    <factory_name> factory;
    std::auto_ptr\<<comp_name>\> p((<comp_name>*)(factory.CreateFromXML(data.get()).release()));
    ASSERT_EQ(p-\>Sid(), sid("<comp_name>").get_id());
    ASSERT_STREQ(p-\>Name(), "<comp_name>");

    <attr_test_group>

    Json::Value root = p-\>ToJSONValue();

    std::auto_ptr\<<comp_name>\> p1(p.release());
    
    p.reset((<comp_name>*)(factory.CreateFromJSON(root).release()));

    <attr_test_group>

    ASSERT_EQ(p->ToJSONValue().compare(p1->ToJSONValue()), 0);
}

>>

attr_test_group(statements) ::= "<statements; separator=\"\n\">"

array_attr_test_block(array_type, getter, statements) ::= <<
{
    <array_type> vec_val = p-\><getter>();
    <statements:{x|<x>}; separator="\n">
}
>>


(ns editor.st
  (:import (org.stringtemplate.v4 ST
                                  STGroup
                                  STGroupDir
                                  STGroupFile
                                  STGroupString
                                  AttributeRenderer))
  (:import (java.io File))
  (:import (java.util Formatter
                      Locale))
  (:use (editor name-util core types component sid template unit-test sql))
  (:use [clojure.xml :as xml])
  (:require [clojure.string :as string]))

(def *cpp-component-stg* "st/cpp/component.stg")
(def *cpp-component-factory-stg* "st/cpp/component_factory.stg")
(def *cpp-test-factory-stg* "st/cpp/test_factory.stg")
(def *cpp-game-object-factory-stg* "st/cpp/game_object_factory.stg")
(def *cpp-game-object-db-stg* "st/cpp/game_object_db.stg")
(def *cpp-game-sql-stg* "st/cpp/sql.stg")

(def *manifest* "Automatically generated by happy world editor, DO NOT edit by hands.")

(def *component-gen-dir* "cpp_gen/component_gen")
(def *cpp-include-dir* "cpp_gen/include")
(def *cpp-src-dir* "cpp_gen/src")
(def *cpp-test-dir* "cpp_gen/unit_test")
(def *cpp-sql-inclue-dir* "cpp_gen/sql/include")
(def *cpp-sql-src-dir* "cpp_gen/sql/src")
(def *component-factory-header-name* "component_factory.h")
(def *component-factory-cpp-name* "component_factory.cpp")
(def *component-factory-test-filename* "component_factory_test.cpp")
(def *game-object-factory-header-name* "game_object_factory.h")
(def *game-object-factory-cpp-name* "game_object_factory.cpp")
(def *game-object-factory-test-filename* "game_object_factory_test.cpp")
(def *component-define-cpp* "component_gen_define.cpp")
(def *game-object-db-define-cpp* "game_object_db.cpp")
(def *game-object-db-header* "game_object_db.h")
(def *game-sql-header* "game_sql.h")
(def *game-sql-cpp* "game_sql.cpp")

(defn- in-dir [dir file]
  (let [d (File. dir)]
    (if-not (.exists d)
      (.mkdirs d))
    (str dir File/separator file)))

(defn- st-add-op [attr-value]
  (if-let [[attr value] attr-value]
    (fn [st]
      (.add st attr value))))

(defn- st-render-op [l]
  (fn [st]
    (.render st l)))

(defn- render-st [st seq & opt]
  (doseq [op (map st-add-op seq)]
    (op st))
  (if opt
    (.render st (first opt))
    (.render st)))

(defn- inspect-st [st seq & opt]
  (doseq [op (map st-add-op seq)]
    (op st))
  (if opt
    (.inspect st (first opt))
    (.inspect st)))

(declare *st-group*)

(defn- inst-st [st-name]
  (.getInstanceOf *st-group* st-name))

(defmacro with-stg [stg & body]
  `(binding [*st-group* (STGroupFile. ~stg)]
     ~@body))

(defn- component-class-file [st component-class]
  (fn [comp-key]
    (render-st st (list ["filename", (cpp-component-gen-header-filename comp-key)]
                        ["date" (get-date)]
                        ["manifest" *manifest*]
                        ["name" (cpp-component-gen-header-define comp-key)]
                        ["body" (component-class comp-key)]))))

(defn- component-class [st component-bases initialize-list initialize-members attributes getters-and-setters]
  (fn [comp-key]
    (render-st st (list ["name" (cpp-component-gen-name comp-key)]
                        ["comp_name" (cpp-component-name comp-key)]
                        ["bases" (component-bases comp-key)]
                        ["initialize_list" (initialize-list comp-key)]
                        ["initialize_members" (initialize-members comp-key)]
                        ["sid" (format "%#x" (gen-sid (cpp-component-name comp-key)))]
                        ["attributes" (attributes comp-key)]
                        ["getters_and_setters" (getters-and-setters comp-key)]))))

(defn- component-bases [st]
  (fn [comp-key]
    (render-st st '(["base_list" "IComponent"]))))

(defn- initialize-list [st attr-builder]
  (fn [comp-key]
    (render-st st (mapcat (comp  #(list ["attrs" (:member-name %)] ["values" (:default-value %)])
                                 (partial attr-builder comp-key))
                          (filter (fn [x]
                                    (atom-attribute? comp-key x)) (component-attribute-keys comp-key))) 80)))

(defn- initialize-member-block [attr-builder]
  (fn [comp-key attr-key]
    (assert (not (atom-attribute? comp-key attr-key)))
    (let [attr (attr-builder comp-key attr-key)
          array-values (:default-array-value attr)]
      (let [st (inst-st "initialize_vector_block")]
        (render-st st (mapcat (fn [x]
                                (list ["push_backs" (format "this->%s.push_back(%s);"
                                                            (:member-name attr)
                                                            x)]
                                      ["emplace_backs" (format "this->%s.emplace_back(%s);"
                                                               (:member-name attr) x)]))
                              array-values))))))

(defn- initialize-members [st attr-builder]
  (fn [comp-key]
    (let [attr-list (filter (fn [x]
                              (not (atom-attribute? comp-key x)))
                            (component-attribute-keys comp-key))]
      (render-st st (map (fn [x]
                           ["blocks" ((initialize-member-block attr-builder) comp-key x)]) attr-list)))))

(defn- doc-lines [st]
  (fn [attr]
    (let [lines (mapcat #(string/split % #";") (map #(string/replace % #"^\s+" "") (string/split (:doc attr) #"\n")))]
      (render-st st (map (fn [x]
                           ["lines" x])
                         lines)))))

(defn- attributes [st attr-builder]
  (fn [comp-key]
    (render-st st (mapcat (comp #(list ["types" (:define-type %)]
                                       ["names" (:member-name %)]
                                       ["docs" ((doc-lines (inst-st "doc_lines")) %)])
                                (partial attr-builder comp-key))
                          (component-attribute-keys comp-key)))))

(defn- getters-and-setters [st attr-builder]
  (fn [comp-key]
    (render-st st (mapcat (comp #(list ["types" (:getter-return-type %)]
                                       ["getters" (:getter-name %)]
                                       ["setters" (:setter-name %)]
                                       ["setter_arg_types" (:setter-argument-type %)]
                                       ["m_names" (:member-name %)]
                                       ["arg_names" (:setter-argument-name %)])
                                (partial attr-builder comp-key))
                          (component-attribute-keys comp-key)))))

(defn gen-component [comp-key]
  "生成一个Cpp Component类头文件"
  (with-stg *cpp-component-stg*
    (let [bases-st (inst-st "bases")
          bases (component-bases bases-st)
          attributes-st (inst-st "attributes")
          attrs (attributes attributes-st make-cpp-attribute)
          initialize-list-st (inst-st "initialize_list")
          initialize-list-fn (initialize-list initialize-list-st make-cpp-attribute)
          initialize-members-st (inst-st "initialize_members")
          initialize-members-fn (initialize-members initialize-members-st make-cpp-attribute)
          getters-and-setters-st (inst-st "getters_and_setters")
          gas (getters-and-setters getters-and-setters-st make-cpp-attribute)
          class-st (inst-st "component_class")
          cls (component-class class-st bases initialize-list-fn initialize-members-fn attrs gas)
          file-st (inst-st "component_header")]
      (spit (in-dir *component-gen-dir* (cpp-component-gen-header-filename comp-key)) 
            ((component-class-file file-st cls) comp-key)))))


(defn- component-sid-initialize [st]
  (fn [comp-key-list]
    (let [name-lens (map #(-> % cpp-component-gen-name count) comp-key-list)
          max-len (apply max name-lens)
          padding-map (zipmap comp-key-list (map (comp #(apply str %) #(repeat % \space) (partial - max-len)) name-lens))]
      (render-st st (mapcat (fn [x]
                              (list ["comps" (cpp-component-gen-name x)]
                                    ["paddings" (padding-map x)]
                                    ["sids" (format "%#x" (gen-sid (cpp-component-name x)))])) comp-key-list)))))

(defn- component-raw-name-initialize [st]
  (fn [comp-key-list]
    (let [name-lens (map #(-> % cpp-component-gen-name count) comp-key-list)
          max-len (apply max name-lens)
          padding-map (zipmap comp-key-list (map (comp #(apply str %) #(repeat % \space) (partial - max-len)) name-lens))]
      (render-st st (mapcat (fn [x]
                              (list ["comps" (cpp-component-gen-name x)]
                                    ["paddings" (padding-map x)]
                                    ["raw_names" (name x)])) comp-key-list)))))

(defn- attribute-set-block-selector []
  (fn [attr]
    (let [raw-type (:raw-type attr)
          [st op-list] (cond (int-type? raw-type) [(inst-st "set_int_value")
                                                   (list ["attr" (:variable-name attr)]
                                                         ["setter" (:setter-name attr)]
                                                         ["int_type" (:define-type attr)]
                                                         ["atoi" (atoi raw-type)])]
                             (= :string raw-type) [(inst-st "set_string_value")
                                                   (list ["attr" (:variable-name attr)]
                                                         ["setter" (:setter-name attr)])] 
                             (= :enum raw-type) [(inst-st "set_enum_value")
                                                 (list ["attr" (:variable-name attr)]
                                                       ["setter" (:setter-name attr)]
                                                       ["enum_int_val" (name *enum-int-value-tag*)])]
                             (= :bool raw-type) [(inst-st "set_bool_value")
                                                 (list ["attr" (:variable-name attr)]
                                                       ["setter" (:setter-name attr)])]
                             :else (throw (Exception. (format "unknown type %s" raw-type))))]
      (render-st st op-list))))

(defn- st-has-attribute? [st attr]
  (let [attrs (keys (.getAttributes st))]
    (some #{attr} attrs)))

(defn- build-atom-attribute [st attr-builder set-block-selector]
  (fn [comp-key attr-key]
    (let [op-table ((comp #(list ["component_name" (cpp-component-name comp-key)]
                                 ["variable_name" (:variable-name %)]
                                 ["attr_name" (:raw-name %)]
                                 ["set_block" ((set-block-selector) %)])
                          (partial attr-builder comp-key)) attr-key)]
      (render-st st op-table))))

(defn- array-attribute-set-block-selector []
  (fn [attr]
    (let [raw-type (:raw-type attr)
          [st op-list] (cond (int-type? raw-type) [(inst-st "set_int_array_value")
                                                   (list ["setter" (:setter-name attr)]
                                                         ["attr" (:variable-name attr)]
                                                         ["array_type" (:define-type attr)]
                                                         ["atoi" (atoi raw-type)])]
                             (= :string raw-type) [(inst-st "set_string_array_value")
                                                   (list ["setter" (:setter-name attr)]
                                                         ["attr" (:variable-name attr)])]
                             (= :enum raw-type) [(inst-st "set_enum_array_value")
                                                 (list ["attr" (:variable-name attr)]
                                                       ["setter" (:setter-name attr)]
                                                       ["enum_int_val" (name *enum-int-value-tag*)])]
                             (= :bool raw-type) [(inst-st "set_bool_array_value")
                                                 (list ["attr" (:variable-name attr)]
                                                       ["setter" (:setter-name attr)])]
                             :else [(inst-st "set_unknown_value")
                                    (list ["attr" (:variable-name attr)]
                                          ["setter" (:setter-name attr)]
                                          ["type" (name raw-type)])])]
      (render-st st op-list))))

(defn- build-array-attribute [st attr-builder set-block-selector]
  (fn [comp-key attr-key]
    (let [op-table ((comp #(list ["component_name" (cpp-component-name comp-key)]
                                 ["variable_name" (:variable-name %)]
                                 ["attr_name" (:raw-name %)]
                                 ["set_block" ((set-block-selector) %)])
                          (partial attr-builder comp-key)) attr-key)]
      (render-st st op-table))))

(defn- factory-build-attributes [attr-builder]
  (fn [comp-key]
    (let [attr-list (component-attribute-keys comp-key)]
      (map (fn [x]
             (let [[st builder selector] (if (atom-attribute? comp-key x)
                                           (vector (inst-st "build_atom_attribute")
                                                   build-atom-attribute
                                                   attribute-set-block-selector)
                                           (vector (inst-st "build_array_attribute")
                                                   build-array-attribute
                                                   array-attribute-set-block-selector))]
               ((builder st attr-builder selector) comp-key x)))
           attr-list))))

(defn- atom-attr-json-from-record-set-selector [comp-key]
  (fn [attr-info]
    (let [raw-type (:raw-type attr-info)]
      (let [[st op-list] (cond (int-type? raw-type) [(inst-st "set_int_from_record_set")
                                                     (list ["int_type" (:define-type attr-info)]
                                                           ["variable_name" (:variable-name attr-info)]
                                                           ["cursor_value_getter" "GetPODFieldFromCursor"]
                                                           ["field_name" (:variable-name attr-info)]
                                                           ["comp_name" (name comp-key)]
                                                           ["attr_name" (:raw-name attr-info)])]
                               (= :string raw-type) [(inst-st "set_string_from_record_set")
                                                     (list ["variable_name" (:variable-name attr-info)]
                                                           ["field_name" (:variable-name attr-info)]
                                                           ["attr_name" (:raw-name attr-info)]
                                                           ["comp_name" (name comp-key)])]
                               (= :enum raw-type) [(inst-st "set_enum_from_record_set")
                                                   (list ["variable_name" (:variable-name attr-info)]
                                                         ["field_name" (:variable-name attr-info)]
                                                         ["attr_name" (:raw-name attr-info)]
                                                         ["comp_name" (name comp-key)])]
                               (= :bool raw-type) [(inst-st "set_bool_from_record_set")
                                                   (list ["variable_name" (:variable-name attr-info)]
                                                         ["field_name" (:variable-name attr-info)]
                                                         ["attr_name" (:raw-name attr-info)]
                                                         ["comp_name" (name comp-key)])]
                               :else  [(inst-st "set_unknown_value")
                                       (list ["attr" (:variable-name attr-info)]
                                             ["setter" (:setter-name attr-info)]
                                             ["type" (name raw-type)])])]
        (render-st (inst-st "atom_attribute_from_record_set")
                   (list ["comp_name" (name comp-key)]
                         ["attr_name" (:raw-name attr-info)]
                         ["set_block" (render-st st op-list)]))))))

(defn- array-attr-json-from-record-set-selector [comp-key]
  (fn [attr-info]
    (let [raw-type (:raw-type attr-info)]
      (let [[st op-list] (cond (int-type? raw-type) [(inst-st "set_int_array_from_record_set")
                                                     (list ["int_type" (:define-type attr-info)]
                                                           ["cursor_value_getter" "GetPODFieldFromCursor"]
                                                           ["field_name" "item"]
                                                           ["comp_name" (name comp-key)]
                                                           ["attr_name" (:raw-name attr-info)])]
                               (= :string raw-type) [(inst-st "set_string_array_from_record_set")
                                                     (list ["field_name" "item"]
                                                           ["attr_name" (:raw-name attr-info)]
                                                           ["comp_name" (name comp-key)])]
                               (= :enum raw-type) [(inst-st "set_enum_array_from_record_set")
                                                   (list ["field_name" "item"]
                                                         ["attr_name" (:raw-name attr-info)]
                                                         ["comp_name" (name comp-key)])]
                               (= :bool raw-type) [(inst-st "set_bool_array_from_record_set")
                                                   (list ["field_name" "item"]
                                                         ["attr_name" (:raw-name attr-info)]
                                                         ["comp_name" (name comp-key)])]
                               :else  [(inst-st "set_unknown_value")
                                       (list ["attr" (:variable-name attr-info)]
                                             ["setter" (:setter-name attr-info)]
                                             ["type" (name raw-type)])])]
        (render-st (inst-st "array_attribute_from_record_set")
                   (list ["comp_name" (name comp-key)]
                         ["attr_name" (:raw-name attr-info)]
                         ["set_block" (render-st st op-list)]))))))

(defn- attr-json-from-record-set [comp-key]
  (fn [attr-key]
    (let [attr-info (make-cpp-attribute comp-key attr-key)
          selector-fn (if (atom-attribute? comp-key attr-key)
                        (atom-attr-json-from-record-set-selector comp-key)
                        (array-attr-json-from-record-set-selector comp-key))]
      (selector-fn attr-info))))

(defn- comp-attr-json-from-record-set []
  (fn [comp-key]
    (let [attr-list (component-attribute-keys comp-key)
          f (attr-json-from-record-set comp-key)]
      (map (fn [x]
             ["attributes_from_record_set" (f x)]) attr-list))))

(defn- factory-find-component-node [st]
  (fn [comp-key]
    (render-st st (list ["go_tag" (name *go-component-tag*)]
                        ["raw_name" (name comp-key)]
                        ["class_name" (cpp-component-name comp-key)]))))

(defn- component-factory-define [st find-component-node build-attributes json-from-record-set]
  (fn [comp-key]
    (render-st st (list* ["class_name" (cpp-component-name comp-key)]
                         ["factory_name" (cpp-component-factory-name comp-key)]
                         ["raw_name" (name comp-key)]
                         ["find_component_node" (find-component-node comp-key)]
                         (concat (map #(vector "build_attributes" %)
                                      (build-attributes comp-key))
                                 (json-from-record-set comp-key))))))

(defn- component-factory-cpp [st]
  (fn [comp-key-list]
    (render-st st (list* ["file_name" *component-factory-cpp-name*]
                         ["date", (get-date)]
                         (mapcat (fn [x]
                                   (let [build-attributes (factory-build-attributes
                                                           make-cpp-attribute)
                                         find-component-node (factory-find-component-node
                                                              (inst-st "find_component_node"))
                                         json-from-record-set (comp-attr-json-from-record-set)
                                         define-st (component-factory-define
                                                    (inst-st "component_factory_define") find-component-node
                                                    build-attributes
                                                    json-from-record-set)]
                                     (list ["component_headers", (cpp-component-header-filename x)]
                                           ["component_factory_defines", (define-st x)])))
                                 comp-key-list)
                         ))))

(defn- component-factory-decl [st]
  (fn [comp-key]
    (render-st st (list ["factory_name" (cpp-component-factory-name comp-key)]
                        ["interface_name" "IComponent"]))))

(defn- component-factory-header [st]
  (fn [comp-key-list]
    (render-st st (list* ["file_name" *component-factory-header-name*]
                         ["guard" "_COMPONENT_FACTORY_H_"]
                         ["manifest" *manifest*]
                         ["date" (get-date)]
                         (map (fn [x]
                                (let [decl-st (component-factory-decl
                                               (inst-st "component_factory_decl"))]
                                  ["factory_decls" (decl-st x)]))
                              comp-key-list)))))

(defn gen-component-factory [comp-key-list]
  "生成一个Cpp Component类Factory"
  (with-stg *cpp-component-factory-stg*
    (let [cpp-st (component-factory-cpp (inst-st "component_factory_cpp"))
          header-st (component-factory-header (inst-st "component_factory_header"))]
      (spit (in-dir *cpp-include-dir* *component-factory-header-name*) (header-st comp-key-list))
      (spit (in-dir *cpp-src-dir* *component-factory-cpp-name*) (cpp-st comp-key-list)))))

(defn- array-attr-test-block [st test-values]
  (fn [comp-key attr-key]
    (let [attr-info (make-cpp-attribute comp-key attr-key)
          test-fn (:array-item-test attr-info)
          idx-seq (range (count test-values))]
      (render-st st (list* ["array_type" (:define-type attr-info)]
                           ["getter" (:getter-name attr-info)]
                           (map (fn [i v]
                                  (vector "statements" (test-fn "vec_val" i v)))
                                idx-seq test-values))))))

(defn- attr-test-group [st]
  (fn [comp-key]
    (let [attr-list (component-attribute-keys comp-key)
          test-case (comp-key *component-factory-test-case-table*)]
      (render-st st (concat (map #(vector "statements" %) (:atom-attribute-test-statments test-case))
                            (map (fn [x]
                                   (let [st-fn (array-attr-test-block (inst-st "array_attr_test_block")
                                                                      (-> test-case :test-value-map x))]
                                     (vector "statements" (st-fn comp-key x))))
                                 (filter #(not (atom-attribute? comp-key %)) attr-list)))))))

(defn- define-sub-cursors []
  (fn [comp-key]
    (let [array-attr-list (filter-component-attributes (comp not (partial atom-attribute? comp-key)) comp-key)]
      (map (fn [x]
             (let [st (inst-st "define_sub_cursor")
                   attr-info (make-cpp-attribute comp-key x)]
               ["define_sub_cursors" (render-st st (list ["var_name" (:variable-name attr-info)]))]))
           array-attr-list))))

(defn- set-sub-cursors []
  (fn [comp-key]
    (let [array-attr-list (filter-component-attributes (comp not (partial atom-attribute? comp-key)) comp-key)]
      (map (fn [x]
             (let [st (inst-st "set_sub_cursor")
                   attr-info (make-cpp-attribute comp-key x)]
               ["set_sub_cursors" (render-st st (list ["attr_name" (:raw-name attr-info)]
                                                      ["var_name" (:variable-name attr-info)]))]))
           array-attr-list))))

(defn- expect-mock-cursors []
  (letfn [(flat [l]
            (if (nil? l)
              nil
              (let [car (first l)]
                (if (vector? car)
                  (cons car (flat (next l)))
                  (concat car (flat (next l)))))))]
    (fn [comp-key]
      (let [attr-list (component-attribute-keys comp-key)
            test-case (comp-key *component-factory-test-case-table*)]
        (flat (map (fn [x]
                     (let [attr-info (make-cpp-attribute comp-key x)]
                       (if (atom-attribute? comp-key x)
                         (let [st (inst-st "expect_root_mock_cursor")]
                           ["expect_mock_cursors" (render-st st (list ["cursor_name" "root"]
                                                                      ["field_name" (:variable-name attr-info)]
                                                                      ["value" (str \" (db-string-value (:raw-type attr-info)
                                                                                                        comp-key x
                                                                                                        (-> test-case :test-value-map x)) \")]))])
                         (let [st (inst-st "expect_sub_mock_cursor")
                               value-vec (-> test-case :test-value-map x)
                               op-list (list* ["cursor_name" (:variable-name attr-info)]
                                              ["field_name" "item"]
                                              ["count" (count value-vec)]
                                              (mapcat (fn [v]
                                                        (list 
                                                         ["has_records" "true"]
                                                         ["values" (str \" (db-string-value (:raw-type attr-info)
                                                                                            comp-key x v) \")]))
                                                      value-vec))]
                           ["expect_mock_cursors" (render-st st op-list)]))))
                   attr-list))))))

(defn- final-sub-cursors []
  (fn [comp-key]
    (let [array-attr-list (filter-component-attributes (comp not (partial atom-attribute? comp-key)) comp-key)]
      (map (fn [x]
             (let [st (inst-st "expect_call_get_record")
                   attr-info (make-cpp-attribute comp-key x)]
               ["final_sub_cursors" (render-st st (list ["cursor_name" (:variable-name attr-info)]
                                                        ["value" "false"]))]))
           array-attr-list))))

(defn- mock-cursor-block []
  (fn [comp-key]
    (let [st (inst-st "mock_cursors")
          attr-list (component-attribute-keys comp-key)]
      (render-st st (concat ((define-sub-cursors) comp-key)
                            ((set-sub-cursors) comp-key) 
                            ((expect-mock-cursors) comp-key)
                            ((final-sub-cursors) comp-key))))))

(defn- comp-test [st]
  (fn [comp-key]
    (let [attr-test-group-fn (attr-test-group (inst-st "attr_test_group"))
          test-case (comp-key *component-factory-test-case-table*)]
      (render-st st (list* ["comp_name" (cpp-component-name comp-key)]
                           ["factory_name" (cpp-component-factory-name comp-key)]
                           ["raw_name" (name comp-key)]
                           ["mock_cursor_block" ((mock-cursor-block) comp-key)] 
                           ["attr_test_group" (attr-test-group-fn comp-key)]
                           (map #(vector "xml_string" %) (string/split-lines (:xml-element-str test-case)))
                           )))))

(defn- component-factory-test-file [st]
  (fn [comp-key-list]
    (render-st st (list* ["manifest" *manifest*]
                         ["filename" (cpp-component-factory-test-filename)]
                         ["date" (get-date)]
                         (concat (map #(vector "comp_headers" (cpp-component-header-filename %))
                                      comp-key-list)
                                 (map #(vector "comp_tests" ((comp-test (inst-st "comp_test")) %))
                                      comp-key-list))))))

(defn gen-component-factory-test [comp-key-list]
  "生成cpp Component Factory的单元测试代码"
  (with-stg *cpp-test-factory-stg*
    (let [test-factory-file-fn (component-factory-test-file (inst-st "test_factory_file"))]
      (spit (in-dir *cpp-test-dir* *component-factory-test-filename*) (test-factory-file-fn comp-key-list)))))

(defn- game-object-decl [st]
  (fn [go-key]
    (render-st st (list ["factory_name" (cpp-game-object-factory-name go-key)]
                        ["game_object_interface" "IGameObject"]))))

(defn- game-object-factory-header [st]
  (fn [go-list]
    (render-st st (list* ["file_name" *game-object-factory-header-name*]
                         ["guard" "_GAME_OBJECT_FACTORY_H_"]
                         ["manifest" *manifest*]
                         ["date" (get-date)]
                         (map (fn [x]
                                (let [decl-fn (game-object-decl
                                               (inst-st "game_object_factory_decl"))]
                                  (vector "factory_decls" (decl-fn x))))
                              go-list)))))

(defn- game-object-create-component [st factory-name]
  (fn [comp-key]
    (render-st st (list ["factory_name" factory-name]
                        ["comp_interface" "IComponent"]
                        ["comp_name" (cpp-component-name comp-key)]
                        ["comp_factory_name" (cpp-component-factory-name comp-key)]))))

(defn- game-object-create-component-from-json [st factory-name]
  (fn [comp-key]
    (render-st st (list ["factory_name" factory-name]
                        ["comp_interface" "IComponent"]
                        ["comp_name" (cpp-component-name comp-key)]
                        ["comp_factory_name" (cpp-component-factory-name comp-key)]))))

(defn- game-object-factory-define [st]
  (fn [obj-key]
    (let [comp-list (keys (make-concrete-template obj-key))]
      (render-st st (list* ["factory_name" (cpp-game-object-factory-name obj-key)]
                           ["obj_interface" "IGameObject"]
                           (mapcat (fn [x]
                                     (list ["create_components" ((game-object-create-component (inst-st "create_component")
                                                                                               (cpp-game-object-factory-name obj-key)) x)]
                                           ["create_components_from_json" ((game-object-create-component-from-json (inst-st "create_component_from_json")
                                                                                                                   (cpp-game-object-factory-name obj-key)) x)]))
                                   comp-list)))
      )))

(defn- game-object-factory-cpp [st]
  (fn [go-list]
    (render-st st (list* ["file_name" *game-object-factory-cpp-name*]
                         ["manifest" *manifest*]
                         ["date" (get-date)]
                         ["header" *game-object-factory-header-name*]
                         (map (fn [x]
                                (vector "factory_defines"
                                        ((game-object-factory-define (inst-st "game_object_factory_define")) x)))
                              go-list)))))

(defn gen-game-object-factory [go-list]
  "生成一个Cpp GameObject类Factory"
  (with-stg *cpp-game-object-factory-stg*
    (let [cpp-st (game-object-factory-cpp (inst-st "game_object_factory_cpp"))
          header-st (game-object-factory-header (inst-st "game_object_factory_header"))]
      (spit (in-dir *cpp-src-dir* *game-object-factory-cpp-name*) (cpp-st go-list))
      (spit (in-dir *cpp-include-dir* *game-object-factory-header-name*) (header-st go-list)))))

(defn- attribute->json []
  (fn [comp-key attr-key]
    (let [info (make-cpp-attribute comp-key attr-key)]
      (let [[st op-list] (if (atom-attribute? comp-key attr-key)
                           [(inst-st "atom_attribute_to_json")
                            (list ["raw_name" (:raw-name info)]
                                  ["attr_name" (:member-name info)])]
                           [(inst-st "array_attribute_to_json")
                            (list ["raw_name" (:raw-name info)]
                                  ["attr_name" (:member-name info)])])]
        (render-st st op-list)))))

(defn- comp-to-json [st]
  (fn [comp-key]
    (let [attr-list (component-attribute-keys comp-key)]
      (render-st st (list* ["class_name" (cpp-component-gen-name comp-key)]
                           (map (fn [x]
                                  (vector "attribute_to_jsons" ((attribute->json) comp-key x)))
                                attr-list))))))

(defn- json->attribute []
  (fn [comp-key attr-key]
    (let [info (make-cpp-attribute comp-key attr-key)]
      (let [[st op-list] (if (atom-attribute? comp-key attr-key)
                           [(inst-st "atom_attribute_from_json")
                            (list ["raw_name" (:raw-name info)]
                                  ["default_value" (:default-value info)]
                                  ["attr_name" (:member-name info)]
                                  ["converter" ((:raw-type info) *json-converter-table*)])]
                           [(inst-st "array_attribute_from_json")
                            (list ["raw_name" (:raw-name info)]
                                  ["vec_type" (:define-type info)]
                                  ["attr_name" (:member-name info)]
                                  ["converter" ((:raw-type info) *json-converter-table*)])])]
        (render-st st op-list)))))

(defn- comp-from-json [st]
  (fn [comp-key]
    (let [attr-list (component-attribute-keys comp-key)]
      (render-st st (list* ["class_name" (cpp-component-gen-name comp-key)]
                           (map (fn [x]
                                  (vector "attribute_from_jsons" ((json->attribute) comp-key x)))
                                attr-list))))))

(defn- json-function-define [st]
  (fn [comp-key]
    (render-st st (list ["to_json" ((comp-to-json (inst-st "to_json")) comp-key)]
                        ["from_json" ((comp-from-json (inst-st "from_json")) comp-key)]))))

(defn- component-define-cpp [st]
  (fn [comp-list]
    (render-st st (list* ["filename" *component-define-cpp*]
                         ["date" (get-date)]
                         ["manifest" *manifest*]
                         ["sid_initialize" ((component-sid-initialize (inst-st "component_sid_initialize")) comp-list)]
                         ["raw_name_initialize" ((component-raw-name-initialize (inst-st "component_raw_name_initialize")) comp-list)]
                         (mapcat (fn [x]
                                   (list ["component_headers" (cpp-component-gen-header-filename x)]
                                         ["component_defines" ((json-function-define (inst-st "json_function_define")) x)]))
                                 comp-list)))))

(defn gen-component-define-cpp [comp-key-list]
  (with-stg *cpp-component-stg*
    (let [component-cpp-st (inst-st "component_cpp")]
      (spit (in-dir *cpp-src-dir* *component-define-cpp*)
            ((component-define-cpp component-cpp-st) comp-key-list)))))

(defn- db-load-component-signature [st]
  (fn [comp-key]
    (let [attr-list (filter (fn [x]
                              (not (atom-attribute? comp-key x)))
                            (component-attribute-keys comp-key))]
      (render-st st (list* ["comp_name" (cpp-component-name comp-key)]
                           ["sqls" "root"]
                           (map (fn [x]
                                  (vector "sqls" (:variable-name (make-cpp-attribute comp-key x))))
                                attr-list)) 80))))

(defn- db-load-all-signature [st]
  (fn [obj-key]
    (let [comp-list (keys (make-concrete-template obj-key))
          all-attr-list (mapcat (fn [x]
                                  (map (fn [y]
                                         (:variable-name (make-cpp-attribute x y)))
                                       (filter-component-attributes (comp not (partial atom-attribute? x)) x))) comp-list)]
      (render-st st (list* ["sqls" "root"]
                           (map #(vector "sqls" %) all-attr-list)) 80))))

(defn- db-load-game-object-component [st]
  (fn [comp-key]
    (render-st st (list ["factory_name" (cpp-component-factory-name comp-key)]
                        ["jv" "jv"]
                        ["rs" "rs"]
                        ["comp_name" (name comp-key)]))))

(defn- db-init-game-object-sql-command [st]
  (fn [obj-key]
    (let [comp-list (keys (make-concrete-template obj-key))
          all-attr-map (into {} (mapcat (fn [x]
                                          (map (fn [y]
                                                 [y (:variable-name (make-cpp-attribute x y))])
                                               (filter-component-attributes (comp not (partial atom-attribute? x)) x))) comp-list))]
      (render-st st (mapcat (fn [[attr sql]]
                              (list ["attrs" (name attr)]
                                    ["sqls" sql])) all-attr-map)))))

(defn- db-load-all-arg-list [st]
  (fn [obj-key]
    (let [comp-list (keys (make-concrete-template obj-key))
          all-attr-list (mapcat (fn [x]
                                  (map (fn [y]
                                         (:variable-name (make-cpp-attribute x y)))
                                       (filter-component-attributes (comp not (partial atom-attribute? x)) x))) comp-list)]
      (render-st st (list* ["sqls" "root"]
                           (map #(vector "sqls" %) all-attr-list)) 80))))

(defn- db-load-all-define [st]
  (fn [obj-key]
    (let [comp-list (keys (make-concrete-template obj-key))
          init-sql-command-fn (db-init-game-object-sql-command (inst-st "init_game_object_sql_command"))
          db-load-all-arg-list-fn (db-load-all-arg-list (inst-st "arg_list"))]
      (render-st st (list* ["class_name" (cpp-game-object-sql-cmd-name obj-key)]
                           ["go_name" (name obj-key)]
                           ["arg_list" (db-load-all-arg-list-fn obj-key)]
                           ["init_sql_command" (init-sql-command-fn obj-key)]
                           ["rs" "rs"]
                           (map (fn [x]
                                  (let [f (db-load-game-object-component
                                           (inst-st "load_game_object_component"))]
                                    ["load_game_object_components" (f x)])) comp-list))))))

(defn- db-sql-cmd-class-define [st]
  (fn [obj-key]
    (render-st st (list ["class_name" (cpp-game-object-sql-cmd-name obj-key)]
                        ["load_all_define" ((db-load-all-define
                                             (inst-st "load_all_define")) obj-key)]))))

(defn- game-object-db-define [st]
  (fn [go-list]
    (render-st st (list* ["file_name" *game-object-db-define-cpp*]
                         ["manifest" *manifest*]
                         ["date" (get-date)]
                         ["game_object_db_header" *game-object-db-header*]
                         (map (fn [x]
                                ["sql_cmd_class_defines" ((db-sql-cmd-class-define
                                                           (inst-st "sql_cmd_class_define")) x)]) go-list)))))

(defn- db-sql-cmd-class [st]
  (fn [obj-key]
    (render-st st (list ["class_name" (cpp-game-object-sql-cmd-name obj-key)]
                        ["load_all_signature" ((db-load-all-signature
                                                (inst-st "load_all_signature")) obj-key)]))))

(defn- game-object-db-header [st]
  (fn [go-list]
    (render-st st (list* ["file_name" *game-object-db-header*]
                         ["guard" "_GAME_OBJECT_DB_H_"]
                         ["manifest" *manifest*]
                         ["date" (get-date)]
                         (map (fn [x]
                                ["sql_cmd_classes" ((db-sql-cmd-class
                                                     (inst-st "sql_cmd_class")) x)])
                              go-list)))))

(defn gen-game-object-db [go-list]
  (with-stg *cpp-game-object-db-stg*
    (let [game-object-db-header-fn (game-object-db-header (inst-st "game_object_db_header"))
          game-object-db-define-fn (game-object-db-define (inst-st "game_object_db_define"))]
      (spit (in-dir *cpp-include-dir* *game-object-db-header*) (game-object-db-header-fn go-list))
      (spit (in-dir *cpp-src-dir* *game-object-db-define-cpp*) (game-object-db-define-fn go-list)))))

(defn- sql-func-decl []
  (fn [func-key]
    (if-let [func-info (sql-func-info func-key)]
      (let [st (inst-st "sql_func_decl")]
        (render-st st (list* ["func_name" (-> func-info :func-name clojure-token->cpp-token)]
                              ["doc" (:doc func-info)]
                              ["args" "char* __dest"]
                              ["args" "int __n"]
                              (map (fn [x]
                                     ["args" (sql-func-arg-decl x)])
                                   (partition 2 (:arg-spec func-info)))) 80)))))

(defn- sql-func-define []
  (fn [func-key]
    (if-let [func-info (sql-func-info func-key)]
      (let [st (inst-st "sql_func_define")]
        (render-st st (list* ["func_name" (-> func-info :func-name clojure-token->cpp-token)]
                             ["args" "char* __dest"]
                             ["args" "int __n"]
                             (concat (map (fn [x]
                                            ["args" (sql-func-arg-decl x)])
                                          (partition 2 (:arg-spec func-info)))
                                     (map (fn [x]
                                            ["fmt_str" x])
                                          (string/split (:fmt-str func-info) #"@"))
                                     (map (fn [x]
                                            ["fmt_arg_list" x])
                                          (:arg-list func-info)))) 80)))))

(defn- sql-class-define []
  (fn [func-list]
    (let [st (inst-st "sql_class_define")]
      (render-st st (list* ["manifest" *manifest*]
                           ["date" (get-date)]
                           ["header_file" *game-sql-header*]
                           ["filename" *game-sql-cpp*]
                           (map (fn [x]
                                  ["sql_func_defines" ((sql-func-define) x)])
                                func-list))))))

(defn- sql-class-header []
  (fn [func-list]
    (let [st (inst-st "sql_class_header")]
      (render-st st (list* ["manifest" *manifest*]
                           ["date" (get-date)]
                           ["filename" *game-sql-header*]
                           (map (fn [x]
                                  ["sql_func_decls" ((sql-func-decl) x)])
                                func-list))))))

(defn gen-sql-class [func-list]
  (with-stg *cpp-game-sql-stg*
    (spit (in-dir *cpp-sql-src-dir* *game-sql-cpp*)
          ((sql-class-define) func-list))
    (spit (in-dir *cpp-sql-inclue-dir* *game-sql-header*)
          ((sql-class-header) func-list))))

(ns editor.st
  (:import (org.stringtemplate.v4 ST
                                  STGroup
                                  STGroupDir
                                  STGroupFile
                                  STGroupString
                                  AttributeRenderer))
  (:import (java.io File))
  (:import (java.util Formatter
                      Locale))
  (:use (editor name-util core types component)))

(def *cpp-component-stg* "st/cpp/component.stg")

(defn st-add-op [attr-value]
  (let [[attr value] attr-value]
    (fn [st]
      (.add st attr value))))

(defn st-render-op [l]
  (fn [st]
    (.render st l)))

(defn component-class-file [st component-class]
  (fn [comp-key]
    (doseq [op (map st-add-op [["manifest" "Automatically generated by happy world editor, DO NOT edit by hand."]
                               ["name" (cpp-component-header-define comp-key)]
                               ["body" (component-class comp-key)]])]
      (op st))
    (.render st)))

(defn component-class [st component-bases initialize-list attributes getters-and-setters]
  (fn [comp-key]
    (doseq [op (map st-add-op (list ["name" (cpp-component-name comp-key)]
                                    ["bases" (component-bases comp-key)]
                                    ["initialize_list" (initialize-list comp-key)]
                                    ["attributes" (attributes comp-key)]
                                    ["getters_and_setters" (getters-and-setters comp-key)]))]
      (op st))
    (.render st)))

(defn component-bases [st]
  (fn [comp-key]
    (doseq [op (map st-add-op '(["base_list" "IComponent"]))]
      (op st))
    (.render st)))

(defn initialize-list [st attr-builder]
  (fn [comp-key]
    (doseq [op (map st-add-op (mapcat (comp  #(list ["attrs" (:member-name %)] ["values" (:default-value %)])
                                             (partial attr-builder comp-key))
                                      (component-attribute-keys comp-key)))]
      (op st))
    (.render st 80)))

(defn attributes [st attr-builder]
  (fn [comp-key]
    (doseq [op (map st-add-op (mapcat (comp #(list ["types" (:define-type %)] ["names" (:member-name %)])
                                             (partial attr-builder comp-key))
                                       (component-attribute-keys comp-key)))]
      (op st))
    (.render st)))

(defn getters-and-setters [st attr-builder]
  (fn [comp-key]
    (doseq [op (map st-add-op (mapcat (comp #(list ["types" (:getter-return-type %)]
                                                   ["getters" (:getter-name %)]
                                                   ["setters" (:setter-name %)]
                                                   ["m_names" (:member-name %)]
                                                   ["arg_names" (:setter-argument-name %)])
                                             (partial attr-builder comp-key))
                                       (component-attribute-keys comp-key)))]
      (op st))
    (.render st)))

(defn gen-component [comp-key]
  "生成一个Cpp Component类头文件"
  (let [group (STGroupFile. *cpp-component-stg*)
        bases-st (.getInstanceOf group "bases")
        bases (component-bases bases-st)
        attributes-st (.getInstanceOf group "attributes")
        attrs (attributes attributes-st make-cpp-attribute)
        initialize-list-st (.getInstanceOf group "initialize_list")
        initialize (initialize-list initialize-list-st make-cpp-attribute)
        getters-and-setters-st (.getInstanceOf group "getters_and_setters")
        gas (getters-and-setters getters-and-setters-st make-cpp-attribute)
        class-st (.getInstanceOf group "component_class")
        cls (component-class class-st bases initialize attrs gas)
        file-st (.getInstanceOf group "component_header")]
    (spit "tmp_1.h" ((component-class-file file-st cls) comp-key))))

(gen-component :monster-property)

(ns editor.st
  (:import (org.stringtemplate.v4 ST
                                  STGroup
                                  STGroupDir
                                  STGroupFile
                                  STGroupString
                                  AttributeRenderer))
  (:import (java.io File))
  (:import (java.util Formatter
                      Locale))
  (:use (editor name-util core types component)))

(def *cpp-component-stg* "st/cpp/component.stg")

(def *manifest* "Automatically generated by happy world editor, DO NOT edit by hands.")

(defn st-add-op [attr-value]
  (let [[attr value] attr-value]
    (fn [st]
      (.add st attr value))))

(defn st-render-op [l]
  (fn [st]
    (.render st l)))

(defn component-class-file [st component-class]
  (fn [comp-key]
    (doseq [op (map st-add-op [["manifest" *manifest*]
                               ["name" (cpp-component-header-define comp-key)]
                               ["body" (component-class comp-key)]])]
      (op st))
    (.render st)))

(defn component-class [st component-bases initialize-list attributes getters-and-setters]
  (fn [comp-key]
    (doseq [op (map st-add-op (list ["name" (cpp-component-name comp-key)]
                                    ["bases" (component-bases comp-key)]
                                    ["initialize_list" (initialize-list comp-key)]
                                    ["attributes" (attributes comp-key)]
                                    ["getters_and_setters" (getters-and-setters comp-key)]))]
      (op st))
    (.render st)))

(defn component-bases [st]
  (fn [comp-key]
    (doseq [op (map st-add-op '(["base_list" "IComponent"]))]
      (op st))
    (.render st)))

(defn initialize-list [st attr-builder]
  (fn [comp-key]
    (doseq [op (map st-add-op (mapcat (comp  #(list ["attrs" (:member-name %)] ["values" (:default-value %)])
                                             (partial attr-builder comp-key))
                                      (component-attribute-keys comp-key)))]
      (op st))
    (.render st 80)))

(defn attributes [st attr-builder]
  (fn [comp-key]
    (doseq [op (map st-add-op (mapcat (comp #(list ["types" (:define-type %)]
                                                   ["names" (:member-name %)]
                                                   ["docs" (:doc %)])
                                             (partial attr-builder comp-key))
                                       (component-attribute-keys comp-key)))]
      (op st))
    (.render st)))

(defn getters-and-setters [st attr-builder]
  (fn [comp-key]
    (doseq [op (map st-add-op (mapcat (comp #(list ["types" (:getter-return-type %)]
                                                   ["getters" (:getter-name %)]
                                                   ["setters" (:setter-name %)]
                                                   ["m_names" (:member-name %)]
                                                   ["arg_names" (:setter-argument-name %)])
                                             (partial attr-builder comp-key))
                                       (component-attribute-keys comp-key)))]
      (op st))
    (.render st)))

(defn gen-component [comp-key]
  "生成一个Cpp Component类头文件"
  (let [group (STGroupFile. *cpp-component-stg*)
        bases-st (.getInstanceOf group "bases")
        bases (component-bases bases-st)
        attributes-st (.getInstanceOf group "attributes")
        attrs (attributes attributes-st make-cpp-attribute)
        initialize-list-st (.getInstanceOf group "initialize_list")
        initialize (initialize-list initialize-list-st make-cpp-attribute)
        getters-and-setters-st (.getInstanceOf group "getters_and_setters")
        gas (getters-and-setters getters-and-setters-st make-cpp-attribute)
        class-st (.getInstanceOf group "component_class")
        cls (component-class class-st bases initialize attrs gas)
        file-st (.getInstanceOf group "component_header")]
    (spit "tmp_1.h" ((component-class-file file-st cls) comp-key))
    (keys (.getAttributes file-st))))

;(gen-component :monster-property)

(let [group (STGroupFile. "st/cpp/component_factory.stg")
      build-attributes (.getInstanceOf group "build_attributes")
      set-int-value (.getInstanceOf group "set_int_value")
      set-string-value (.getInstanceOf group "set_string_value")
      find-component-node (.getInstanceOf group "find_component_node")
      component-factory-define (.getInstanceOf group "component_factory_define")]
  (doto set-int-value
    (.add "attr" "id")
    (.add "setter" "SetId"))
  (doto build-attributes
    (.add "component_names" "BaseComponent")
    (.add "attr_names" "id")
    (.add "set_blocks" set-int-value)
    (.add "component_names" "BaseComponent")
    (.add "attr_names" "name")
    (.add "set_blocks" set-string-value))
  (doto set-string-value
    (.add "attr" "name")
    (.add "setter" "SetName"))
  (doto find-component-node
    (.add "go_tag" "go-component")
    (.add "raw_name" "base")
    (.add "class_name" "BaseComponent"))
  (doto component-factory-define
    (.add "class_name", "BaseComponent")
    (.add "factory_name" "BaseComponentFactory")
    (.add "find_component_node" find-component-node)
    (.add "build_attributes" build-attributes))
  (spit "test_component_factory_define.cpp" (.render component-factory-define)))

(def *cpp-component-factory-stg* "st/cpp/component_factory.stg")

(defn- attribute-set-block-selector [group raw-type]
  (let [st (cond (= :int raw-type) (.getInstanceOf group "set_int_value")
                 (= :string raw-type) (.getInstanceOf group "set_string_value")
                 (= :enum raw-type) (.getInstanceOf group "set_enum_value")
                 (= :bool raw-type) (.getInstanceOf group "set_bool_value")
                 :else (.getInstanceOf group "set_unknown_value"))]
    st))

(defn- attribute-set-block [st]
  (fn [attr]
    (doseq [op (map st-add-op (list ["attr" (:variable-name attr)]
                                    ["setter" (:setter-name attr)]))]
      (op st))
    (.render st)))

(defn- factory-build-attributes [st attr-builder set-block-selector]
  (fn [comp-key]
    (let [op-table (mapcat (comp #(list ["component_names" (cpp-component-name comp-key)]
                                        ["variable_names" (:variable-name %)]
                                        ["attr_names" (:raw-name %)]
                                        ["set_blocks" ((attribute-set-block (set-block-selector (:raw-type %))) %)])
                                 (partial attr-builder comp-key))
                           (component-attribute-keys comp-key))]
      (doseq [op (map st-add-op op-table)]
        (op st))
      (.render st))))

(defn- factory-find-component-node [st]
  (fn [comp-key]
    (doseq [op (map st-add-op (list ["go_tag" (name *go-component-tag*)]
                                    ["raw_name" (name comp-key)]
                                    ["class_name" (cpp-component-name comp-key)]))]
      (op st))
    (.render st)))

(defn- component-factory-define [st find-component-node build-attributes]
  (fn [comp-key]
    (doseq [op (map st-add-op (list ["class_name" (cpp-component-name comp-key)]
                                    ["factory_name" (cpp-component-factory-name comp-key)]
                                    ["find_component_node" (find-component-node comp-key)]
                                    ["build_attributes" (build-attributes comp-key)]))]
      (op st))
    (.render st)))

(def *component-factory-header-name* "component_factory.h")

(def *component-factory-cpp-name* "component_factory.cpp")

(defn- component-factory-cpp [st group]
  (fn [comp-key-list]
    (doseq [op (map st-add-op (list* ["file_name" *component-factory-cpp-name*]
                                     ["date", (get-date)]
                                     (map (fn [x]
                                            (let [build-attributes (factory-build-attributes (.getInstanceOf group "build_attributes") make-cpp-attribute (partial attribute-set-block-selector group))
                                                  find-component-node (factory-find-component-node (.getInstanceOf group "find_component_node"))
                                                  define-st (component-factory-define (.getInstanceOf group "component_factory_define") find-component-node
                                                                                      build-attributes)]
                                              ["component_factory_defines", (define-st x)]))
                                          comp-key-list)))]
      (op st))
    (.render st)))

(defn- component-factory-decl [st]
  (fn [comp-key]
    (doseq [op (map st-add-op (list ["factory_name" (cpp-component-factory-name comp-key)]
                                    ["interface_name" "IComponent"]))]
      (op st))
    (.render st)))

(defn- component-factory-header [st group]
  (fn [comp-key-list]
    (doseq [op (map st-add-op (list* ["file_name" *component-factory-header-name*]
                                     ["guard" "_COMPONENT_FACTORY_H_"]
                                     ["manifest" *manifest*]
                                     ["date" (get-date)]
                                     (map (fn [x]
                                            (let [decl-st (component-factory-decl (.getInstanceOf group "component_factory_decl"))]
                                              ["factory_decls" (decl-st x)]))
                                          comp-key-list)))]
      (op st))
    (.render st)))

(defn gen-component-factory [comp-key-list]
  "生成一个Cpp Component类Factory"
  (let [group (STGroupFile. *cpp-component-factory-stg*)
        cpp-st (component-factory-cpp (.getInstanceOf group "component_factory_cpp") group)
        header-st (component-factory-header (.getInstanceOf group "component_factory_header") group)]
    (spit *component-factory-header-name* (header-st comp-key-list))
    (spit *component-factory-cpp-name* (cpp-st comp-key-list))))

'(:combat-property :monster-property :rpg-property :vip-item :trade :seeding :item-base :base)

; (gen-component-factory :combat-property)
(gen-component-factory '(:combat-property :monster-property :rpg-property :vip-item :trade :seeding :item-base :base))

